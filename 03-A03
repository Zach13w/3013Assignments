/*****************************************************************************
*                    
*  Author:           Zachary Lewis
*  Email:            zalewis0317@my.msutexas.edu
*  Label:            03-A03
*  Title:            Delete function
*  Course:           CMPS 3013
*  Semester:         Spring 2025
* 
*  Description:
*        Delete function for binary search tree
* 
*  Usage:
*        allows for the deletion of nodes
* 
*  Files:            
*****************************************************************************/

TreeNode* deleteNode(TreeNode* root, int key) 
{
    if (root == nullptr) return root;

    if (key < root->val) 
    {
        root->left = deleteNode(root->left, key);  // Search in left subtree
    } 
    else if (key > root->val) 
    {
        root->right = deleteNode(root->right, key); // Search in right subtree
    } 
    else 
        {
        
        if (root->left == nullptr)                 // Node with only one child or no child
        {
            TreeNode* temp = root->right;
            delete root;
            return temp;
        }

        else if (root->right == nullptr)
        {
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }

        
        TreeNode* temp = findMin(root->right);   // Node with two children: Get inorder successor (smallest in right subtree)

        
        root->val = temp->val;                   // Copy the inorder successor's value to this node

        
        root->right = deleteNode(root->right, temp->val);    // Delete the inorder successor
    }
    return root;
}
