// Function to delete a node from a BST
TreeNode* deleteNode(TreeNode* root, int key) {
    if (root == nullptr) return root;

    if (key < root->val) {
        root->left = deleteNode(root->left, key);  // Search in left subtree
    } 
    else if (key > root->val) {
        root->right = deleteNode(root->right, key); // Search in right subtree
    } 
    else {
        // Node with only one child or no child
        if (root->left == nullptr) {
            TreeNode* temp = root->right;
            delete root;
            return temp;
        } 
        else if (root->right == nullptr) {
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }

        // Node with two children: Get inorder successor (smallest in right subtree)
        TreeNode* temp = findMin(root->right);

        // Copy the inorder successor's value to this node
        root->val = temp->val;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->val);
    }
    return root;
}
